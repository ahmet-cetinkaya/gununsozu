{"version":3,"sources":["serviceWorker.js","components/CategoryInput/CategoryInput.jsx","helper/random.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","CategoryInput","label","value","isChecked","onChange","className","type","id","name","checked","htmlFor","useStickyState","defaultValue","key","React","useState","stickyValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","App","dateNow","Date","getDate","date","setDate","categories","setCategories","wordsList","getWordsOfCategories","useCallback","forEach","category","push","words","word","setWord","setRandomWord","min","max","length","Math","floor","random","handleCategoryChangeSelect","e","target","filter","c","removeCategory","onClick","includes","text","author","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qh1BAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,+CCdS,SAASC,EAAT,GAA6D,IAArCC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,UAAWC,EAAW,EAAXA,SAC9D,OACE,0BAAMC,UAAU,kBACd,2BACEC,KAAK,WACLC,GAAIL,EACJM,KAAMN,EACNA,MAAOA,EACPO,QAASN,EACTC,SAAUA,IAEZ,2BAAOM,QAASR,GAAQD,ICf9B,I,OCQA,SAASU,EAAeC,EAAcC,GAAM,IAAD,EACfC,IAAMC,UAAS,WACvC,IAAMC,EAAcpB,OAAOqB,aAAaC,QAAQL,GAChD,OAAuB,OAAhBG,EAAuBG,KAAKC,MAAMJ,GAAeJ,KAHjB,mBAClCV,EADkC,KAC3BmB,EAD2B,KAQzC,OAHAP,IAAMQ,WAAU,WACd1B,OAAOqB,aAAaM,QAAQV,EAAKM,KAAKK,UAAUtB,MAC/C,CAACW,EAAKX,IACF,CAACA,EAAOmB,GAwEFI,MArEf,WACQ,IAAAC,GAAU,IAAIC,MAAOC,UAArB,EACcjB,EAAee,EAAS,QADtC,mBACHG,EADG,KACGC,EADH,KADO,EAIuBnB,EAAe,CAAC,cAAe,YAJtD,mBAINoB,EAJM,KAIMC,EAJN,KAQPC,EAAY,GAChBC,EAAuBC,uBAAY,kBACjCJ,EAAWK,SAAQ,SAAAC,GAAQ,OAAIJ,EAAUK,KAAV,MAAAL,EAAS,YAASM,EAAMF,WAV9C,EAaW1B,EAAe,GAAI,QAb9B,mBAaN6B,EAbM,KAaAC,EAbA,KAcXC,EAAgB,WDjCE,IAACC,EAAKC,ECkCtBH,EAAQR,GDlCSU,ECkCe,EDlCVC,ECkCaX,EAAUY,OAAS,EDjCnDC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMD,EAAM,IAAMA,MC0C/CM,EAA6B,SAAAC,GAnBnB,IAAAb,EAoBVa,EAAEC,OAAO1C,SApBC4B,EAoBoBa,EAAEC,OAAOjD,MApBjB8B,EAAc,GAAD,mBAAKD,GAAL,CAAiBM,MACvC,SAAAA,GAAYL,EAAcD,EAAWqB,QAAO,SAAAC,GAAC,OAAIA,IAAMhB,MAoBnEiB,CAAeJ,EAAEC,OAAOjD,QAQ/B,OALAoB,qBAAU,WACRY,IAXIM,GAAQd,KAAaG,IACzBC,EAAQJ,GACRgB,OAWC,CAACR,IAGF,yBAAK3B,GAAG,OACN,yBAAKA,GAAG,eACN,yBAAKA,GAAG,eACN,4BAAQgD,QAASb,GAAjB,WAEF,yBAAKnC,GAAG,sBACN,kBAAC,EAAD,CACEN,MAAM,YACNC,MAAM,aACNC,UAAW4B,EAAWyB,SAAS,cAC/BpD,SAAU6C,IAEZ,kBAAC,EAAD,CACEhD,MAAM,aACNC,MAAO,cACPC,UAAW4B,EAAWyB,SAAS,eAC/BpD,SAAU6C,IAEZ,kBAAC,EAAD,CACEhD,MAAM,aACNC,MAAM,aACNC,UAAW4B,EAAWyB,SAAS,cAC/BpD,SAAU6C,MAIhB,yBAAK1C,GAAG,QACN,wBAAIA,GAAG,QAAQiC,GAAQA,EAAKiB,MAC5B,uBAAGlD,GAAG,UAAUiC,GAAQA,EAAKkB,W,cC5ErCC,EAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SJyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.be6d9adc.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import './CategoryInput.scss';\r\n\r\nimport React from 'react';\r\n\r\nexport default function CategoryInput({label, value, isChecked, onChange}) {\r\n  return (\r\n    <span className=\"categoryOption\">\r\n      <input\r\n        type=\"checkbox\"\r\n        id={value}\r\n        name={value}\r\n        value={value}\r\n        checked={isChecked}\r\n        onChange={onChange}\r\n      />\r\n      <label htmlFor={value}>{label}</label>\r\n    </span>\r\n  );\r\n}\r\n","const getRndInteger = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n};\r\n\r\nexport { getRndInteger };\r\n","import './App.scss';\r\n\r\nimport React, {useCallback, useEffect} from 'react';\r\n\r\nimport CategoryInput from './components/CategoryInput/CategoryInput';\r\nimport {getRndInteger} from './helper/random';\r\nimport words from './json/words.json';\r\n\r\nfunction useStickyState(defaultValue, key) {\r\n  const [value, setValue] = React.useState(() => {\r\n    const stickyValue = window.localStorage.getItem(key);\r\n    return stickyValue !== null ? JSON.parse(stickyValue) : defaultValue;\r\n  });\r\n  React.useEffect(() => {\r\n    window.localStorage.setItem(key, JSON.stringify(value));\r\n  }, [key, value]);\r\n  return [value, setValue];\r\n}\r\n\r\nfunction App() {\r\n  const dateNow = new Date().getDate(),\r\n    [date, setDate] = useStickyState(dateNow, 'date');\r\n\r\n  const [categories, setCategories] = useStickyState(['technology'], 'category'),\r\n    addCategory = category => setCategories([...categories, category]),\r\n    removeCategory = category => setCategories(categories.filter(c => c !== category));\r\n\r\n  const wordsList = [],\r\n    getWordsOfCategories = useCallback(() =>\r\n      categories.forEach(category => wordsList.push(...words[category])),\r\n    );\r\n\r\n  const [word, setWord] = useStickyState('', 'word'),\r\n    setRandomWord = () => {\r\n      setWord(wordsList[getRndInteger(0, wordsList.length - 1)]);\r\n    };\r\n\r\n  const checkChange = () => {\r\n    if (word && dateNow === +date) return;\r\n    setDate(dateNow);\r\n    setRandomWord();\r\n  };\r\n\r\n  const handleCategoryChangeSelect = e => {\r\n    if (e.target.checked) addCategory(e.target.value);\r\n    else removeCategory(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getWordsOfCategories();\r\n    checkChange();\r\n  }, [getWordsOfCategories]);\r\n\r\n  return (\r\n    <div id=\"App\">\r\n      <div id=\"optionsMenu\">\r\n        <div id=\"refreshMenu\">\r\n          <button onClick={setRandomWord}>Yenile</button>\r\n        </div>\r\n        <div id=\"categorySelectMenu\">\r\n          <CategoryInput\r\n            label=\"Teknoloji\"\r\n            value=\"technology\"\r\n            isChecked={categories.includes('technology')}\r\n            onChange={handleCategoryChangeSelect}\r\n          />\r\n          <CategoryInput\r\n            label=\"İlham\"\r\n            value={'inspiration'}\r\n            isChecked={categories.includes('inspiration')}\r\n            onChange={handleCategoryChangeSelect}\r\n          />\r\n          <CategoryInput\r\n            label=\"Motivasyon\"\r\n            value=\"motivation\"\r\n            isChecked={categories.includes('motivation')}\r\n            onChange={handleCategoryChangeSelect}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div id=\"word\">\r\n        <h1 id=\"text\">{word && word.text}</h1>\r\n        <p id=\"author\">{word && word.author}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import * as serviceWorker from './serviceWorker';\r\n\r\nimport App from './App';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}