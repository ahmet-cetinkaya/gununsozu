{"version":3,"sources":["helper/random.js","App.js","serviceWorker.js","index.js"],"names":["getRndInteger","min","max","Math","floor","random","useStickyState","defaultValue","key","React","useState","stickyValue","window","localStorage","getItem","JSON","parse","value","setValue","useEffect","setItem","stringify","App","dateNow","Date","getDate","date","setDate","category","wordsList","words","length","word","setWord","Number","style","margin","text","textAlign","fontSize","author","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"w00FAAMA,EAAgB,SAACC,EAAKC,GAC1B,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,IAAMA,GCGvD,SAASK,EAAeC,EAAcC,GAAM,IAAD,EACfC,IAAMC,UAAS,WACvC,IAAMC,EAAcC,OAAOC,aAAaC,QAAQN,GAChD,OAAuB,OAAhBG,EAAuBI,KAAKC,MAAML,GAAeJ,KAHjB,mBAClCU,EADkC,KAC3BC,EAD2B,KAQzC,OAHAT,IAAMU,WAAU,WACdP,OAAOC,aAAaO,QAAQZ,EAAKO,KAAKM,UAAUJ,MAC/C,CAACT,EAAKS,IACF,CAACA,EAAOC,GAqBFI,MAlBf,WACE,IAAMC,GAAU,IAAIC,MAAOC,UADd,EAEWnB,EAAeiB,EAAS,QAFnC,mBAENG,EAFM,KAEAC,EAFA,OAGmBrB,EAAe,UAAW,YAH7C,mBAGNsB,EAHM,KAIPC,GAJO,KAIKC,EAAMF,IAJX,EAKWtB,EAAeuB,EAAU7B,EAAc,EAAG6B,EAAUE,OAAS,IAAK,QAL7E,mBAKNC,EALM,KAKAC,EALA,KAUb,OAJIV,IAAYW,OAAOR,KACrBC,GAAQ,IAAIH,MAAOC,WACnBQ,EAAQJ,EAAU7B,EAAc,EAAG6B,EAAUE,OAAS,MAGtD,yBAAKI,MAAO,CAAEC,OAAQ,SACpB,wBAAID,MAAO,CAAEC,OAAQ,MAAQJ,EAAKK,MAClC,uBAAGF,MAAO,CAAEG,UAAW,QAASC,SAAU,SAAUH,OAAQ,MAA5D,KAAsEJ,EAAKQ,UChB7DC,QACW,cAA7B7B,OAAO8B,SAASC,UAEe,UAA7B/B,OAAO8B,SAASC,UAEhB/B,OAAO8B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a82a22e0.chunk.js","sourcesContent":["const getRndInteger = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n};\r\n\r\nexport { getRndInteger };\r\n","import React from \"react\";\r\nimport words from \"./json/words.json\";\r\nimport { getRndInteger } from \"./helper/random\";\r\n\r\nfunction useStickyState(defaultValue, key) {\r\n  const [value, setValue] = React.useState(() => {\r\n    const stickyValue = window.localStorage.getItem(key);\r\n    return stickyValue !== null ? JSON.parse(stickyValue) : defaultValue;\r\n  });\r\n  React.useEffect(() => {\r\n    window.localStorage.setItem(key, JSON.stringify(value));\r\n  }, [key, value]);\r\n  return [value, setValue];\r\n}\r\n\r\nfunction App() {\r\n  const dateNow = new Date().getDate();\r\n  const [date, setDate] = useStickyState(dateNow, \"date\");\r\n  const [category, setCategory] = useStickyState(\"bilisim\", \"category\");\r\n  const wordsList = words[category];\r\n  const [word, setWord] = useStickyState(wordsList[getRndInteger(0, wordsList.length - 1)], \"word\");\r\n  if (dateNow !== Number(date)) {\r\n    setDate(new Date().getDate());\r\n    setWord(wordsList[getRndInteger(0, wordsList.length - 1)]);\r\n  }\r\n  return (\r\n    <div style={{ margin: \"1rem\" }}>\r\n      <h3 style={{ margin: \"0\" }}>{word.text}</h3>\r\n      <p style={{ textAlign: \"right\", fontSize: \"0.8rem\", margin: \"0\" }}>- {word.author}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}